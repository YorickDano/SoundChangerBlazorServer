@page "/"
@page "/home"
@using SoundChangerBlazorServer.Models.YoutubeModels;

@inject IJSRuntime JSRuntime;
@inject AudioService AudioService;
@inject SpotifyClient SpotifyClient;
@inject NavigationManager NavigationManager
@inject YoutubeDownloader YoutubeDownloader;
@inject IWebHostEnvironment WebHostEnv;

<PageTitle>Index</PageTitle>

<div class="container">
    <div class="main-content">
        <div class="top-section">
            @if (IsAlertMessage)
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert" style="font-size: 20px;font-weight:600;">
                    <strong>Fail</strong>
                    @AlertMessage
                    <button @onclick="CloseAlert" id="alert" type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            }
            <label class="file-input">
                <InputFile class="file-input" OnChange="@FileInput" />
                File input
            </label>
            <br />
            <div>OR</div>
            <div id="youtubePartial">
                <br />
                <div>Search in youtube</div>
                <input placeholder="Enter url or title"
                @bind-value="@YoutubeSearch"
                @bind-value:event="oninput" type="text" />
                <select name="number"
                @bind-value="@YoutubeSearchType"
                @bind-value:event="oninput">
                    <option value="video">Video</option>
                    <option value="playlist">Playlist</option>
                </select>
                <button @onclick="SearchYoutube" class="btn btn-primary">Search</button>
            </div>
            <br />
            <div>OR</div>
            <br />
            @if (!SpotifyClient.IsAuthorized)
            {
                <div id="SpotifyAut">
                    <button @onclick="SpotifyConnect" class="btn btn-primary-green">Authorize Spotify</button>
                </div>
            }
            @if (SpotifyClient.IsAuthorized)
            {
                <div id="spotifyPartial">
                    <div>Search in spotify</div>
                    <input placeholder="Enter title"
                    @bind-value="@SpotifySearch"
                    @bind-value:event="oninput" type="text" />
                    <select name="number"
                    @bind-value="@SpotifySearchType"
                    @bind-value:event="oninput">
                        <option value="track">Track</option>
                        <option value="playlist">Playlist</option>
                    </select>
                    <button @onclick="SearchSpotify" class="btn btn-primary">Search</button>
                </div>
            }
            <br />
            @if (Videos != null)
            {
                <button class="btn btn-primary" @onclick="() => VideosHide = !VideosHide">@(VideosHide ? "Show videos" : "Hide videos")</button>
            }
            @if (Videos != null && !VideosHide)
            {
                <br />
                for (var i = 0; i < Videos.Count(); ++i)
                {
                    var video = Videos.ElementAt(i);
                    <div class="track-card">
                        <a href="@video.Url" class="text-decoration-none" target="_blank">
                            <img class="imgTrackCard" src="@video.ImgUrl">
                            <div class="track-card-text">@video.Title</div>
                        </a>

                        <button @onclick="() => ModifyVideo(video.Id)" class="btn modifyButton">Modify</button>
                    </div>

                }
            }
            <br />

            @if (Tracks != null)
            {
                <button class="btn btn-primary" @onclick="() => TracksHide = !TracksHide">@(TracksHide ? "Show tracks" : "Hide tracks")</button>
            }
            @if (Tracks != null && !TracksHide)
            {
                <br />
                for (var i = 0; i < Tracks.Count(); ++i)
                {

                    var title = Tracks.ElementAt(i).Title;
                    var author = Tracks.ElementAt(i).Author;
                    var combine = title + " " + author;

                    <div class="track-card">
                        <a class="text-decoration-none">
                            <img class="imgTrackCard" src="@Tracks.ElementAt(i).ImgUrl">
                            <div class="track-card-text">@(title + '\n' + author)</div>
                        </a>

                        <button @onclick="() => ModifyTrack(combine)" class="btn modifyButton">Modify</button>
                    </div>

                }
            }

            @if (Loading)
            {
                <div class="spinnerBg">
                    <div class="spinner"></div>
                </div>
            }
        </div>
        @if (_audioFiles != null)
        {
            <div class="previousFiles">
                @if (_audioFiles != null && _audioFiles.Any())
                {
                    <button class="btn btn-primary" @onclick="() => ViewPreviousFiles = !ViewPreviousFiles">Click to view/hide previous files</button>
                }
                @if (ViewPreviousFiles)
                {
                    <br />
                    <div>Previous Files:</div>
                    @foreach (var file in _audioFiles)
                    {       
                        <div id="audioParent">
                            @file.Title
                            <br />
                            <audio id="audioPlayer" controls src="@file.AudioPath"></audio>
                            <div>
                                Tempo: @file.Tempo
                                Pitch: @file.Pitch
                                Rate: @file.Rate
                            </div>
                        </div>
                        <button class="btn btn-primary" @onclick="() => ReturnTo(file.Id)">Return to this file</button>
                        <br />
                    }
                }
            </div>
        }
        @if (_audioFile.Created)
        {
            <div class="bottom-section">
                <div class="audio-controls">
                    <button class="btn btn-danger" @onclick="DeleteAll">Delete All</button>
                    <div>
                        Return to previous file
                        <button class="btn btn-primary" @onclick="ReturnToPrevious">Return</button>
                    </div>
                </div>

                <div class="container sample center">
                    <span>Tempo</span>
                    <IgbSlider Change=OnChangeTempo Max="2"
                               Min="0"
                               Value="_settings.Tempo"
                               Step="0.01">
                    </IgbSlider>
                    <div class="value-container">
                        <span class="slider-label">Tempo: @_settings.Tempo</span>
                    </div>
                    <span>Pitch</span>
                    <IgbSlider Change=OnChangePitch Max="2"
                               Min="0"
                               Value="_settings.Pitch"
                               Step="0.01">
                    </IgbSlider>
                    <div class="value-container">
                        <span class="slider-label">Pitch: @_settings.Pitch</span>
                    </div>
                    <span>Rate</span>
                    <IgbSlider Change=OnChangeRate Max="2"
                               Min="0"
                               Value="_settings.Rate"
                               Step="0.01">
                    </IgbSlider>
                    <div class="value-container">
                        <span class="slider-label">Rate: @_settings.Rate</span>
                    </div>
                </div>
                <br />

                <button class="btn btn-primary" @onclick="ChangeSound">Change</button>
            </div>
        }

    </div>
</div>

@if (_audioFile.Created)
{
    <div id="audioParent" class="sticky-bottom">
        @_audioFile.Title
        <br />
        <audio id="audioPlayer" controls src="\@_audioFile.AudioPath"></audio>
        <div>
            Tempo: @_audioFile.Tempo
            Pitch: @_audioFile.Pitch
            Rate: @_audioFile.Rate
        </div>
    </div>
}

<script>
    function UpdateSpotify() {
        var el = document.getElementById('spotifyPartial');
        var autB = document.getElementById('SpotifyAut');
        autB.style.display = 'none';
        el.style.display = 'block';
    }
</script>
@code
{
    private bool IsAlertMessage = false;
    private string AlertMessage;

    private async Task CloseAlert()
    {
        IsAlertMessage = false;
    }
    private async Task ConvertToMp3()
    {
        await AudioService.ConvertCurrentToMp3();
    }
    private async Task ModifyVideo(string id)
    {
        Loading = true;
        var res = await AudioService.LoadFromYoutube(id);

        if (!res)
        {
            AlertMessage = "Something break or track is too long (max 10 min)";
            IsAlertMessage = true;
            Loading = false;
            return;
        }
        _audioFile = await AudioService.GetCurrentFile();
        _audioFiles = await AudioService.GetList();
        Loading = false;
        StateHasChanged();
    }
    private async Task ModifyTrack(string title)
    {
        Loading = true;
        var videoId = await YoutubeDownloader.GetVideoIdByTitleAsync(title);
        var res = await AudioService.LoadFromYoutube($"https://www.youtube.com/watch?v={videoId}");

        if (!res)
        {
            AlertMessage = "Something break or track is too long (max 10 min)";
            IsAlertMessage = true;
            Loading = false;
            return;
        }

        _audioFile = await AudioService.GetCurrentFile();
        _audioFiles = await AudioService.GetList();
        Loading = false;
        StateHasChanged();
    }

    private async Task SpotifyConnect()
    {
        var url = await SpotifyClient.Authorize();
        await JSRuntime.InvokeVoidAsync("open", url, "_blank");
        StateHasChanged();
        //await JSRuntime.InvokeVoidAsync("UpdateSpotify");
    }

    IEnumerable<TrackModel> Tracks;
    IEnumerable<YoutubeVideo> Videos;
    bool TracksHide = true;
    bool VideosHide = true;

    public class TrackModel
    {
        public string Title { get; set; }
        public string Author { get; set; }
        public string ImgUrl { get; set; }
    }

    private async Task SearchSpotify()
    {
        Loading = true;
        SpotifySearchType ??= "track";
        var res = await SpotifyClient.SearchFor(SpotifySearch, Enum.Parse<SpotifyTypes>(SpotifySearchType));

        switch (SpotifySearchType)
        {
            case "playlist":
                {
                    if (res.playlists == null)
                    {
                        break;
                    }
                    var playlistId = res.playlists.items[0].id;
                    var tracks = await SpotifyClient.ConvertPlaylist(playlistId);
                    Tracks = tracks.Select(x => new TrackModel() { Title = x.track.name, Author = x.track.artists[0].name, ImgUrl = x.track.album.images[1].url });
                    break;
                }
            case "track":
                {
                    if (res.tracks == null)
                    {
                        break;
                    }

                    var trackId = res.tracks.items[0].id;
                    var track = await SpotifyClient.ConvertTrack(trackId);
                    Tracks = new TrackModel[] { new TrackModel() { Title = track.name, Author = track.artists[0].name, ImgUrl = track.album.images[1].url } };
                    break;
                }
        }

        TracksHide = false;
        Loading = false;
    }

    private async Task ClearTracks()
    {
        Tracks = Enumerable.Empty<TrackModel>();
    }

    private async Task ReturnToOrigin()
    {
        await AudioService.ReturnToOrigin();
        _audioFile = await AudioService.GetCurrentFile();
        _audioFiles = await AudioService.GetList();
    }

    private async Task ReturnTo(int id)
    {
        await AudioService.ReturnTo(id);
        _audioFile = await AudioService.GetCurrentFile();
        _audioFiles = await AudioService.GetList();
    }

    private async Task ReturnToPrevious()
    {
        await AudioService.ReturnToPrevious();
        _audioFile = await AudioService.GetCurrentFile();
        _audioFiles = await AudioService.GetList();
    }

    private string YoutubeSearch;
    private string YoutubeSearchType = "video";

    private string SpotifySearch;
    private string SpotifySearchType = "track";



    private async Task SearchYoutube()
    {
        Loading = true;
        if (YoutubeSearchType == "video")
        {
            var videos = await YoutubeDownloader.GetVideosAsync(YoutubeSearch);

            Videos = videos;
        }
        else
        {
            var playlist = await YoutubeDownloader.GetPlaylistAsync(YoutubeSearch);

            Videos = playlist.Videos;
        }
        VideosHide = false;
        Loading = false;
    }

    private IEnumerable<AudioFile> _audioFiles;
    private AudioFile _audioFile = new AudioFile();
    private SoundTouchSettings _settings = new SoundTouchSettings();
    private bool Loading = false;
    private bool ViewPreviousFiles = false;

    private async Task FileInput(InputFileChangeEventArgs e)
    {
        Loading = true;
        await AudioService.FileInput(e);
        _audioFile = await AudioService.GetCurrentFile();
        _audioFiles = await AudioService.GetList();
        Loading = false;
        await InvokeAsync(StateHasChanged);
    }

    private async Task ChangeSound()
    {
        Loading = true;
        await AudioService.ChangeSound(_settings);
        _audioFile = await AudioService.GetCurrentFile();
        _audioFiles = await AudioService.GetList();
        Loading = false;
        await InvokeAsync(StateHasChanged);
    }

    private void OnChangeTempo(IgbNumberEventArgs e)
    {
        if (e != null)
        {
            _settings.Tempo = e.Detail;
        }
    }
    private void OnChangePitch(IgbNumberEventArgs e)
    {
        if (e != null)
        {
            _settings.Pitch = e.Detail;
        }
    }
    private void OnChangeRate(IgbNumberEventArgs e)
    {
        if (e != null)
        {
            _settings.Rate = e.Detail;
        }
    }
    private async Task DeleteAll()
    {
        await AudioService.DeleteAllAsync();
    }
}